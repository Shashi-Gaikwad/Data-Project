
import tensorflow as tf
print(tf.__version__)


import cv2
import numpy as np
from tensorflow.keras.models import load_model

# Load pre-trained models for age and gender
age_model = load_model('path/to/age_model.h5')
gender_model = load_model('path/to/gender_model.h5')

# Mean values for the model (based on the dataset it was trained on)
MODEL_MEAN_VALUES = (78.4263377603, 87.7689143744, 114.895847746)

# List of age ranges
age_intervals = ['(0-2)', '(4-6)', '(8-12)', '(15-20)', '(25-32)', '(38-43)', '(48-53)', '(60-100)']

# Labels for gender prediction
gender_labels = ['Male', 'Female']

# Load face detection model
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

def detect_age_and_gender(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    for (x, y, w, h) in faces:
        # Extract face ROI
        face_img = frame[y:y+h, x:x+w].copy()
        blob = cv2.dnn.blobFromImage(face_img, 1.0, (227, 227), MODEL_MEAN_VALUES, swapRB=False)

        # Predict gender
        gender_model.setInput(blob)
        gender_preds = gender_model.forward()
        gender = gender_labels[gender_preds[0].argmax()]

        # Predict age
        age_model.setInput(blob)
        age_preds = age_model.forward()
        age = age_intervals[age_preds[0].argmax()]

        # Draw bounding box and labels on the frame
        label = f"{gender}, {age}"
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
        cv2.putText(frame, label, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
    
    return frame
def main():
    cap = cv2.VideoCapture(0)  # Use the webcam

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        frame = detect_age_and_gender(frame)
        cv2.imshow('Age and Gender Detection', frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
